-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=15,HLS_SYN_FF=3394,HLS_SYN_LUT=3913}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal exitcond3_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_183 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_190 : BOOLEAN;
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_198 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_206 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_214 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_223 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_231 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_239 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_en_V_read_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_1191 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_1203 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_1216 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_1223 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1235 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_1240 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_reg_1245 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_16_reg_1250 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_1_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_1255 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_cast_fu_636_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_cast_reg_1265 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_640_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_reg_1270 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_fu_658_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_reg_1275 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_fu_662_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_reg_1280 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_407 : BOOLEAN;
    signal tmp_29_cast_fu_718_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_29_cast_reg_1305 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_422 : BOOLEAN;
    signal grp_fu_687_ap_done : STD_LOGIC;
    signal grp_fu_712_ap_done : STD_LOGIC;
    signal tmp_30_cast_fu_721_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_cast_reg_1310 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_cast_fu_724_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_33_cast_reg_1315 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_35_cast_fu_727_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_35_cast_reg_1320 : STD_LOGIC_VECTOR (47 downto 0);
    signal Wout_V_fu_734_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1325 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_744_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1330 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_750_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1335 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_753_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1340 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_756_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_1345 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_759_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_1350 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_fu_765_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1362 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_1_cast_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_cast_reg_1367 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_8_cast_fu_771_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_8_cast_reg_1372 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_10_cast_fu_774_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_10_cast_reg_1378 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_9_cast_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_9_cast_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_789_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cout_reg_1397 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_470 : BOOLEAN;
    signal tmp_17_cast_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul1_reg_1414 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_486 : BOOLEAN;
    signal i_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_838_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_1427 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_10_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_504 : BOOLEAN;
    signal grp_fu_846_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_5_reg_1442 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_513 : BOOLEAN;
    signal next_mul2_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1447 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_522 : BOOLEAN;
    signal next_mul3_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1460 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_872_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_reg_1465 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_877_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul4_reg_1470 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ii_fu_887_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1478 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_fu_897_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_reg_1483 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_fu_1175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_16_reg_1488 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_reg_1493 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_559 : BOOLEAN;
    signal grp_fu_951_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_12_reg_1508 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_568 : BOOLEAN;
    signal r_V_13_fu_1165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul5_fu_965_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal next_mul5_reg_1523 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_581 : BOOLEAN;
    signal jj_fu_975_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1533 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1180_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_15_reg_1546 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond4_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1034_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_reg_1556 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_606 : BOOLEAN;
    signal cin_fu_1044_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cin_reg_1564 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_615 : BOOLEAN;
    signal gmem_addr_2_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tp_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_635 : BOOLEAN;
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_644 : BOOLEAN;
    signal sum_3_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_652 : BOOLEAN;
    signal p_s_fu_1158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal i_op_assign_s_reg_247 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_269 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_11_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_326 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_18_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_1_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_5_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_19_reg_382 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_2_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_20_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_sum_cast_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out8_sum_cast_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum9_cast_fu_1064_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal W4_sum_cast_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_769 : BOOLEAN;
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_776 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_785 : BOOLEAN;
    signal lhs_V_cast_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_496_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg4_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_516_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_532_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_cast_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_554_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_568_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_584_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_542_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_600_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_624_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_cast_fu_632_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_646_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_cast_fu_654_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_cast_fu_668_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_cast_fu_671_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_674_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_687_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_687_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_7_cast_fu_693_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_5_cast_fu_696_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_fu_699_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_712_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_29_fu_730_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_30_fu_740_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_cast_fu_795_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias6_sum_fu_803_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_846_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_846_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_893_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_15_cast_fu_906_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_fu_920_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_24_fu_924_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_26_cast_cast_fu_929_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out8_sum_fu_933_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_951_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_981_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_985_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_995_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_11_cast_fu_1012_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_14_cast_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_1025_p2 : signal is "no";
    signal grp_fu_1034_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1034_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_14_cast_fu_1050_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_17_fu_1054_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_17_fu_1054_p2 : signal is "no";
    signal feature_in2_sum9_fu_1059_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp2_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_cast_fu_1084_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_33_fu_1088_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_36_cast_cast_fu_1093_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal W4_sum_fu_1097_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal sum_4_to_int_fu_1112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1115_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_1125_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_9_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_1165_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_13_fu_1165_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_1170_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_1170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_fu_1175_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1180_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_687_ap_start : STD_LOGIC;
    signal grp_fu_712_ap_start : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_1034_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_687_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_712_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_846_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_fu_1170_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_fu_1165_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_177 : BOOLEAN;

    component Conv_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_19s_9ns_19_23_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Conv_mul_32ns_16ns_48_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_32s_16ns_48_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_16ns_16s_48ns_48_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1498,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => p_s_reg_1608,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_fadd_32ns_32ns_32_5_full_dsp_U0 : component Conv_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    Conv_fmul_32ns_32ns_32_4_max_dsp_U1 : component Conv_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_446,
        din1 => gmem_addr_3_read_reg_1586,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    Conv_fcmp_32ns_32ns_1_1_U2 : component Conv_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_1601,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_23_fu_441_p2);

    Conv_sdiv_19s_9ns_19_23_seq_U3 : component Conv_sdiv_19s_9ns_19_23_seq
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_687_ap_start,
        done => grp_fu_687_ap_done,
        din0 => grp_fu_687_p0,
        din1 => grp_fu_687_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p2);

    Conv_sdiv_19s_9ns_19_23_seq_U4 : component Conv_sdiv_19s_9ns_19_23_seq
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_712_ap_start,
        done => grp_fu_712_ap_done,
        din0 => grp_fu_712_p0,
        din1 => grp_fu_712_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_712_p2);

    Conv_mul_32ns_16ns_48_3_U5 : component Conv_mul_32ns_16ns_48_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_846_p0,
        din1 => grp_fu_846_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_846_p2);

    Conv_mul_32s_16ns_48_3_U6 : component Conv_mul_32s_16ns_48_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_16_reg_1488,
        din1 => grp_fu_951_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_951_p2);

    Conv_mul_32ns_16ns_48_3_U7 : component Conv_mul_32ns_16ns_48_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1034_p0,
        din1 => grp_fu_1034_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1034_p2);

    Conv_mul_mul_16ns_16ns_32_1_U8 : component Conv_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_13_fu_1165_p0,
        din1 => r_V_13_fu_1165_p1,
        dout => r_V_13_fu_1165_p2);

    Conv_mul_mul_16ns_16ns_32_1_U9 : component Conv_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_10_fu_1170_p0,
        din1 => r_V_10_fu_1170_p1,
        dout => r_V_10_fu_1170_p2);

    Conv_mul_mul_16ns_16s_32_1_U10 : component Conv_mul_mul_16ns_16s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_16_fu_1175_p0,
        din1 => h_V_fu_897_p2,
        dout => r_V_16_fu_1175_p2);

    Conv_mac_muladd_16ns_16s_48ns_48_1_U11 : component Conv_mac_muladd_16ns_16s_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_1180_p0,
        din1 => w_V_fu_985_p2,
        din2 => r_V_12_reg_1508,
        dout => grp_fu_1180_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_861_p2)))) then 
                i_op_assign_1_reg_258 <= i_reg_1422;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then 
                i_op_assign_1_reg_258 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                i_op_assign_2_reg_280 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_2_reg_280 <= j_reg_1460;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and not((ap_const_lv1_0 = exitcond4_fu_970_p2)))) then 
                i_op_assign_3_reg_326 <= ii_reg_1478;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond_fu_861_p2))) then 
                i_op_assign_3_reg_326 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_5_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and not((ap_const_lv1_0 = brmerge_fu_1003_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = brmerge_fu_1003_p2) and (ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then 
                i_op_assign_5_reg_367 <= jj_fu_975_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond5_fu_1039_p2)))) then 
                i_op_assign_5_reg_367 <= jj_reg_1533;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                i_op_assign_5_reg_367 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                i_op_assign_reg_409 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
                i_op_assign_reg_409 <= cin_reg_1564;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond2_fu_827_p2)))) then 
                i_op_assign_s_reg_247 <= cout_reg_1397;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not(((ap_const_logic_0 = grp_fu_687_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                i_op_assign_s_reg_247 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_861_p2)))) then 
                phi_mul1_reg_269 <= next_mul1_reg_1414;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then 
                phi_mul1_reg_269 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                phi_mul3_reg_303 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) and not((gmem_BVALID = ap_const_logic_0)))) then 
                phi_mul3_reg_303 <= next_mul2_reg_1447;
            end if; 
        end if;
    end process;

    r_V_11_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                r_V_11_reg_291 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) and not((gmem_BVALID = ap_const_logic_0)))) then 
                r_V_11_reg_291 <= next_mul3_reg_1452;
            end if; 
        end if;
    end process;

    r_V_18_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and not((ap_const_lv1_0 = exitcond4_fu_970_p2)))) then 
                r_V_18_reg_337 <= next_mul4_reg_1470;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond_fu_861_p2))) then 
                r_V_18_reg_337 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    r_V_19_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and not((ap_const_lv1_0 = brmerge_fu_1003_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = brmerge_fu_1003_p2) and (ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then 
                r_V_19_reg_382 <= next_mul5_fu_965_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond5_fu_1039_p2)))) then 
                r_V_19_reg_382 <= next_mul5_reg_1523;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                r_V_19_reg_382 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    r_V_20_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                r_V_20_reg_420 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
                r_V_20_reg_420 <= next_mul_reg_1575;
            end if; 
        end if;
    end process;

    sum_1_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = exitcond5_fu_1039_p2)))) then 
                sum_1_reg_349 <= sum_2_reg_397;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and not((ap_const_lv1_0 = brmerge_fu_1003_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = brmerge_fu_1003_p2) and (ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then 
                sum_1_reg_349 <= sum_1_reg_349;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                sum_1_reg_349 <= sum_reg_314;
            end if; 
        end if;
    end process;

    sum_2_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                sum_2_reg_397 <= sum_1_reg_349;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
                sum_2_reg_397 <= grp_fu_431_p2;
            end if; 
        end if;
    end process;

    sum_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and not((ap_const_lv1_0 = exitcond4_fu_970_p2)))) then 
                sum_reg_314 <= sum_1_reg_349;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond_fu_861_p2))) then 
                sum_reg_314 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_1228 <= CHin_V;
                CHout_V_read_reg_1216 <= CHout_V;
                Kx_V_read_reg_1209 <= Kx_V;
                Ky_V_read_reg_1203 <= Ky_V;
                Sx_V_read_reg_1197 <= Sx_V;
                Sy_V_read_reg_1191 <= Sy_V;
                Win_V_read_reg_1223 <= Win_V;
                    lhs_V_2_cast_reg_1265(15 downto 0) <= lhs_V_2_cast_fu_636_p1(15 downto 0);
                    lhs_V_4_cast_reg_1275(15 downto 0) <= lhs_V_4_cast_fu_658_p1(15 downto 0);
                p_1_reg_1255 <= p_1_fu_608_p3;
                p_2_reg_1260 <= p_2_fu_616_p3;
                r_V_3_reg_1270 <= r_V_3_fu_640_p2;
                r_V_7_reg_1280 <= r_V_7_fu_662_p2;
                relu_en_V_read_reg_1186 <= relu_en_V;
                tmp_15_reg_1245 <= W(31 downto 2);
                tmp_16_reg_1250 <= feature_in(31 downto 2);
                tmp_1_reg_1235 <= feature_out(31 downto 2);
                tmp_5_reg_1240 <= bias(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not(((ap_const_logic_0 = grp_fu_687_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then
                Wout_V_reg_1325 <= Wout_V_fu_734_p2;
                    rhs_V_10_cast_reg_1378(15 downto 0) <= rhs_V_10_cast_fu_774_p1(15 downto 0);
                    rhs_V_1_cast_reg_1367(7 downto 0) <= rhs_V_1_cast_fu_768_p1(7 downto 0);
                    rhs_V_1_reg_1355(15 downto 0) <= rhs_V_1_fu_762_p1(15 downto 0);
                    rhs_V_2_reg_1362(15 downto 0) <= rhs_V_2_fu_765_p1(15 downto 0);
                    rhs_V_7_cast_reg_1389(15 downto 0) <= rhs_V_7_cast_fu_780_p1(15 downto 0);
                    rhs_V_8_cast_reg_1372(15 downto 0) <= rhs_V_8_cast_fu_771_p1(15 downto 0);
                    rhs_V_9_cast_reg_1383(15 downto 0) <= rhs_V_9_cast_fu_777_p1(15 downto 0);
                    tmp_10_reg_1345(7 downto 0) <= tmp_10_fu_756_p1(7 downto 0);
                    tmp_11_reg_1350(7 downto 0) <= tmp_11_fu_759_p1(7 downto 0);
                    tmp_29_cast_reg_1305(29 downto 0) <= tmp_29_cast_fu_718_p1(29 downto 0);
                    tmp_30_cast_reg_1310(29 downto 0) <= tmp_30_cast_fu_721_p1(29 downto 0);
                    tmp_33_cast_reg_1315(29 downto 0) <= tmp_33_cast_fu_724_p1(29 downto 0);
                    tmp_35_cast_reg_1320(29 downto 0) <= tmp_35_cast_fu_727_p1(29 downto 0);
                tmp_7_reg_1330 <= tmp_7_fu_744_p2;
                    tmp_9_reg_1335(7 downto 0) <= tmp_9_fu_750_p1(7 downto 0);
                    tmp_s_reg_1340(7 downto 0) <= tmp_s_fu_753_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then
                cin_reg_1564 <= cin_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                cout_reg_1397 <= cout_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                gmem_addr_1_reg_1498 <= feature_out8_sum_cast_fu_938_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and (ap_const_lv1_0 = exitcond5_fu_1039_p2))) then
                gmem_addr_2_reg_1569 <= feature_in2_sum9_cast_fu_1064_p1(32 - 1 downto 0);
                gmem_addr_3_reg_1580 <= W4_sum_cast_fu_1102_p1(32 - 1 downto 0);
                next_mul_reg_1575 <= next_mul_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and not((gmem_RVALID = ap_const_logic_0)))) then
                gmem_addr_3_read_reg_1586 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then
                    gmem_addr_reg_1408(30 downto 0) <= bias6_sum_cast_fu_808_p1(32 - 1 downto 0)(30 downto 0);
                    tmp_17_cast_reg_1402(15 downto 0) <= tmp_17_cast_fu_799_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and (exitcond3_fu_882_p2 = ap_const_lv1_0) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                h_V_reg_1483 <= h_V_fu_897_p2;
                r_V_16_reg_1488 <= r_V_16_fu_1175_p2;
                slt_reg_1493 <= slt_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                i_reg_1422 <= i_fu_832_p2;
                next_mul1_reg_1414 <= next_mul1_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                ii_reg_1478 <= ii_fu_887_p2;
                next_mul4_reg_1470 <= next_mul4_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                j_reg_1460 <= j_fu_866_p2;
                next_mul2_reg_1447 <= next_mul2_fu_851_p2;
                next_mul3_reg_1452 <= next_mul3_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                jj_reg_1533 <= jj_fu_975_p2;
                next_mul5_reg_1523 <= next_mul5_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                p_s_reg_1608 <= p_s_fu_1158_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond2_fu_827_p2))) then
                r_V_10_reg_1432 <= r_V_10_fu_1170_p2;
                tmp_17_reg_1427 <= tmp_17_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                r_V_12_reg_1508 <= grp_fu_951_p2;
                r_V_13_reg_1513 <= r_V_13_fu_1165_p2;
                rev_reg_1518 <= rev_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and (ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = brmerge_fu_1003_p2) and not((ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then
                r_V_15_reg_1546 <= grp_fu_1180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                r_V_5_reg_1442 <= grp_fu_846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) and not((gmem_RVALID = ap_const_logic_0))))) then
                reg_446 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67)) then
                sum_3_reg_1601 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                tmp1_reg_1556 <= grp_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond_fu_861_p2))) then
                tmp_19_reg_1465 <= tmp_19_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                tp_reg_1591 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    lhs_V_2_cast_reg_1265(16) <= '0';
    lhs_V_4_cast_reg_1275(16) <= '0';
    tmp_29_cast_reg_1305(48 downto 30) <= "0000000000000000000";
    tmp_30_cast_reg_1310(30) <= '0';
    tmp_33_cast_reg_1315(48 downto 30) <= "0000000000000000000";
    tmp_35_cast_reg_1320(47 downto 30) <= "000000000000000000";
    tmp_9_reg_1335(15 downto 8) <= "00000000";
    tmp_s_reg_1340(15 downto 8) <= "00000000";
    tmp_10_reg_1345(15 downto 8) <= "00000000";
    tmp_11_reg_1350(15 downto 8) <= "00000000";
    rhs_V_1_reg_1355(31 downto 16) <= "0000000000000000";
    rhs_V_2_reg_1362(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_cast_reg_1367(15 downto 8) <= "00000000";
    rhs_V_8_cast_reg_1372(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_10_cast_reg_1378(23 downto 16) <= "00000000";
    rhs_V_9_cast_reg_1383(31 downto 16) <= "0000000000000000";
    rhs_V_7_cast_reg_1389(31 downto 16) <= "0000000000000000";
    tmp_17_cast_reg_1402(31 downto 16) <= "0000000000000000";
    gmem_addr_reg_1408(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_882_p2, gmem_RVALID, gmem_BVALID, grp_fu_687_ap_done, grp_fu_712_ap_done, exitcond1_fu_784_p2, exitcond2_fu_827_p2, exitcond_fu_861_p2, ap_sig_ioackin_gmem_ARREADY, exitcond4_fu_970_p2, brmerge_fu_1003_p2, tmp_28_fu_1016_p2, exitcond5_fu_1039_p2, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not(((ap_const_logic_0 = grp_fu_687_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_784_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond2_fu_827_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                if ((ap_const_lv1_0 = exitcond_fu_861_p2)) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st31_fsm_30 => 
                if ((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st57_fsm_56;
                elsif (((exitcond3_fu_882_p2 = ap_const_lv1_0) and not((not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                if (((ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = brmerge_fu_1003_p2) and not((ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                elsif ((((ap_const_lv1_0 = exitcond4_fu_970_p2) and not((ap_const_lv1_0 = brmerge_fu_1003_p2))) or ((ap_const_lv1_0 = exitcond4_fu_970_p2) and (ap_const_lv1_0 = tmp_28_fu_1016_p2)))) then
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                if ((ap_const_lv1_0 = exitcond5_fu_1039_p2)) then
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                end if;
            when ap_ST_st39_fsm_38 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st40_fsm_39 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st41_fsm_40;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_39;
                end if;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                end if;
            when ap_ST_st47_fsm_46 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                else
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                end if;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st64_fsm_63;
                else
                    ap_NS_fsm <= ap_ST_st63_fsm_62;
                end if;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st70_fsm_69;
                else
                    ap_NS_fsm <= ap_ST_st69_fsm_68;
                end if;
            when ap_ST_st70_fsm_69 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st71_fsm_70;
                else
                    ap_NS_fsm <= ap_ST_st70_fsm_69;
                end if;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st75_fsm_74;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    W4_sum_cast_fu_1102_p1 <= std_logic_vector(resize(unsigned(W4_sum_fu_1097_p2),64));
    W4_sum_fu_1097_p2 <= std_logic_vector(unsigned(tmp_36_cast_cast_fu_1093_p1) + unsigned(tmp_33_cast_reg_1315));
    Wout_V_fu_734_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_29_fu_730_p1));

    ap_done_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond1_fu_784_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond1_fu_784_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond1_fu_784_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond1_fu_784_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_177_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, exitcond3_fu_882_p2)
    begin
                ap_sig_177 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0)));
    end process;


    ap_sig_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_183 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    ap_sig_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_190 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_198 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    ap_sig_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_206 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_214 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_223 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    ap_sig_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_231 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    ap_sig_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_239 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    ap_sig_407_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_407 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_422 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_470_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_470 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_486_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_486 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_504_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_504 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_513_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_513 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_522 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_559_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_559 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_568_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_568 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_581_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_581 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    ap_sig_606_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_606 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_615_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_615 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    ap_sig_635_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_635 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    ap_sig_644_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_644 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    ap_sig_652_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_652 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    ap_sig_769_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_769 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    ap_sig_776_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_776 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    ap_sig_785_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_785 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_422)
    begin
        if (ap_sig_422) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_470)
    begin
        if (ap_sig_470) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_486)
    begin
        if (ap_sig_486) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_504)
    begin
        if (ap_sig_504) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_513)
    begin
        if (ap_sig_513) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_407)
    begin
        if (ap_sig_407) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_522)
    begin
        if (ap_sig_522) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_559)
    begin
        if (ap_sig_559) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_568)
    begin
        if (ap_sig_568) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_581)
    begin
        if (ap_sig_581) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_606)
    begin
        if (ap_sig_606) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_615)
    begin
        if (ap_sig_615) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_190)
    begin
        if (ap_sig_190) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_206)
    begin
        if (ap_sig_206) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_198)
    begin
        if (ap_sig_198) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_214)
    begin
        if (ap_sig_214) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_785)
    begin
        if (ap_sig_785) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_635)
    begin
        if (ap_sig_635) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_769)
    begin
        if (ap_sig_769) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_644)
    begin
        if (ap_sig_644) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_183)
    begin
        if (ap_sig_183) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_776)
    begin
        if (ap_sig_776) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_652)
    begin
        if (ap_sig_652) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_223)
    begin
        if (ap_sig_223) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_231)
    begin
        if (ap_sig_231) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_239)
    begin
        if (ap_sig_239) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias6_sum_cast_fu_808_p1 <= std_logic_vector(resize(unsigned(bias6_sum_fu_803_p2),64));
    bias6_sum_fu_803_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_795_p1) + unsigned(tmp_30_cast_reg_1310));
    brmerge_fu_1003_p2 <= (tmp_32_fu_995_p3 or rev_reg_1518);
    cin_fu_1044_p2 <= std_logic_vector(unsigned(i_op_assign_reg_409) + unsigned(ap_const_lv16_1));
    cout_fu_789_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_247) + unsigned(ap_const_lv16_1));
    exitcond1_fu_784_p2 <= "1" when (i_op_assign_s_reg_247 = CHout_V_read_reg_1216) else "0";
    exitcond2_fu_827_p2 <= "1" when (i_op_assign_1_reg_258 = tmp_7_reg_1330) else "0";
    exitcond3_fu_882_p2 <= "1" when (i_op_assign_3_reg_326 = Ky_V_read_reg_1203) else "0";
    exitcond4_fu_970_p2 <= "1" when (i_op_assign_5_reg_367 = Kx_V_read_reg_1209) else "0";
    exitcond5_fu_1039_p2 <= "1" when (i_op_assign_reg_409 = CHin_V_read_reg_1228) else "0";
    exitcond_fu_861_p2 <= "1" when (i_op_assign_2_reg_280 = Wout_V_reg_1325) else "0";
        feature_in2_sum9_cast_fu_1064_p1 <= std_logic_vector(resize(signed(feature_in2_sum9_fu_1059_p2),64));

    feature_in2_sum9_fu_1059_p2 <= std_logic_vector(unsigned(r_V_17_fu_1054_p2) + unsigned(tmp_35_cast_reg_1320));
    feature_out8_sum_cast_fu_938_p1 <= std_logic_vector(resize(unsigned(feature_out8_sum_fu_933_p2),64));
    feature_out8_sum_fu_933_p2 <= std_logic_vector(unsigned(tmp_29_cast_reg_1305) + unsigned(tmp_26_cast_cast_fu_929_p1));

    gmem_ARADDR_assign_proc : process(ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39, gmem_addr_reg_1408, gmem_addr_2_reg_1569, gmem_addr_3_reg_1580, ap_reg_ioackin_gmem_ARREADY, ap_sig_177)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                gmem_ARADDR <= gmem_addr_3_reg_1580;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                gmem_ARADDR <= gmem_addr_2_reg_1569;
            elsif (ap_sig_177) then 
                gmem_ARADDR <= gmem_addr_reg_1408;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, exitcond3_fu_882_p2, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st69_fsm_68, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_sig_cseq_ST_st75_fsm_74, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st47_fsm_46, gmem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46) and not((gmem_RVALID = ap_const_logic_0))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_sig_cseq_ST_st70_fsm_69, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_sig_cseq_ST_st31_fsm_30, exitcond3_fu_882_p2, ap_sig_cseq_ST_st39_fsm_38, ap_sig_cseq_ST_st40_fsm_39)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) and not((exitcond3_fu_882_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_sig_cseq_ST_st69_fsm_68)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_sig_cseq_ST_st63_fsm_62, ap_sig_cseq_ST_st46_fsm_45, ap_sig_cseq_ST_st47_fsm_46)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62) or (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_sig_cseq_ST_st70_fsm_69)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1034_p0 <= grp_fu_1034_p00(32 - 1 downto 0);
    grp_fu_1034_p00 <= std_logic_vector(resize(unsigned(tmp_fu_1025_p2),48));
    grp_fu_1034_p1 <= rhs_V_8_cast_reg_1372(16 - 1 downto 0);
    grp_fu_1180_p0 <= rhs_V_1_reg_1355(16 - 1 downto 0);

    grp_fu_431_p0_assign_proc : process(sum_reg_314, sum_2_reg_397, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            grp_fu_431_p0 <= sum_reg_314;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_431_p0 <= sum_2_reg_397;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p1_assign_proc : process(reg_446, tp_reg_1591, ap_sig_cseq_ST_st52_fsm_51, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            grp_fu_431_p1 <= reg_446;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            grp_fu_431_p1 <= tp_reg_1591;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_687_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_687_ap_start <= ap_const_logic_1;
        else 
            grp_fu_687_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_687_p0 <= std_logic_vector(resize(signed(r_V_4_fu_674_p2),19));

    grp_fu_687_p1 <= grp_fu_687_p10(9 - 1 downto 0);
    grp_fu_687_p10 <= std_logic_vector(resize(unsigned(Sx_V_read_reg_1197),19));

    grp_fu_712_ap_start_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_712_ap_start <= ap_const_logic_1;
        else 
            grp_fu_712_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_712_p0 <= std_logic_vector(resize(signed(r_V_8_fu_699_p2),19));

    grp_fu_712_p1 <= grp_fu_712_p10(9 - 1 downto 0);
    grp_fu_712_p10 <= std_logic_vector(resize(unsigned(Sy_V_read_reg_1191),19));
    grp_fu_846_p0 <= grp_fu_846_p00(32 - 1 downto 0);
    grp_fu_846_p00 <= std_logic_vector(resize(unsigned(r_V_10_reg_1432),48));
    grp_fu_846_p1 <= rhs_V_8_cast_reg_1372(16 - 1 downto 0);
    grp_fu_951_p1 <= rhs_V_2_reg_1362(16 - 1 downto 0);
    h_V_fu_897_p2 <= std_logic_vector(unsigned(tmp_17_reg_1427) + unsigned(tmp_25_fu_893_p1));
    i_fu_832_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_258) + unsigned(ap_const_lv16_1));
    ii_fu_887_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_326) + unsigned(ap_const_lv8_1));
    j_fu_866_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_280) + unsigned(ap_const_lv16_1));
    jj_fu_975_p2 <= std_logic_vector(unsigned(i_op_assign_5_reg_367) + unsigned(ap_const_lv8_1));
        lhs_V_11_cast_fu_1012_p1 <= std_logic_vector(resize(signed(w_V_fu_985_p2),17));

    lhs_V_14_cast_fu_1021_p1 <= std_logic_vector(resize(unsigned(r_V_19_reg_382),32));
        lhs_V_15_cast_fu_906_p1 <= std_logic_vector(resize(signed(h_V_fu_897_p2),17));

    lhs_V_1_cast_fu_550_p1 <= std_logic_vector(resize(unsigned(Ky_V),9));
    lhs_V_2_cast_fu_636_p1 <= std_logic_vector(resize(unsigned(Win_V),17));
    lhs_V_4_cast_fu_658_p1 <= std_logic_vector(resize(unsigned(Hin_V),17));
    lhs_V_cast_fu_492_p1 <= std_logic_vector(resize(unsigned(Kx_V),9));
    next_mul1_fu_818_p2 <= std_logic_vector(unsigned(phi_mul1_reg_269) + unsigned(tmp_9_reg_1335));
    next_mul2_fu_851_p2 <= std_logic_vector(unsigned(phi_mul3_reg_303) + unsigned(tmp_10_reg_1345));
    next_mul3_fu_856_p2 <= std_logic_vector(unsigned(r_V_11_reg_291) + unsigned(rhs_V_9_cast_reg_1383));
    next_mul4_fu_877_p2 <= std_logic_vector(unsigned(r_V_18_reg_337) + unsigned(rhs_V_1_cast_reg_1367));
    next_mul5_fu_965_p2 <= std_logic_vector(unsigned(r_V_19_reg_382) + unsigned(rhs_V_10_cast_reg_1378));
    next_mul_fu_1074_p2 <= std_logic_vector(unsigned(rhs_V_9_cast_reg_1383) + unsigned(r_V_20_reg_420));
    notlhs_fu_1129_p2 <= "0" when (tmp_20_fu_1115_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1135_p2 <= "1" when (tmp_31_fu_1125_p1 = ap_const_lv23_0) else "0";
    p_1_fu_608_p3 <= 
        pad_x_V_fu_542_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_2_fu_616_p3 <= 
        pad_y_V_fu_600_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_neg4_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(lhs_V_cast_fu_492_p1));
    p_neg_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(lhs_V_1_cast_fu_550_p1));
    p_s_fu_1158_p3 <= 
        ap_const_lv32_0 when (r_V_9_fu_1153_p2(0) = '1') else 
        sum_3_reg_1601;
    pad_x_V_fu_542_p3 <= 
        tmp_3_fu_526_p2 when (tmp_18_fu_502_p3(0) = '1') else 
        tmp_6_fu_532_p4;
    pad_y_V_fu_600_p3 <= 
        tmp_8_fu_584_p2 when (tmp_21_fu_560_p3(0) = '1') else 
        tmp_12_fu_590_p4;
    r_V_10_fu_1170_p0 <= r_V_10_fu_1170_p00(16 - 1 downto 0);
    r_V_10_fu_1170_p00 <= std_logic_vector(resize(unsigned(i_op_assign_1_reg_258),32));
    r_V_10_fu_1170_p1 <= rhs_V_7_cast_reg_1389(16 - 1 downto 0);
    r_V_13_fu_1165_p0 <= r_V_13_fu_1165_p00(16 - 1 downto 0);
    r_V_13_fu_1165_p00 <= std_logic_vector(resize(unsigned(r_V_18_reg_337),32));
    r_V_13_fu_1165_p1 <= rhs_V_1_reg_1355(16 - 1 downto 0);
    r_V_16_fu_1175_p0 <= rhs_V_1_reg_1355(16 - 1 downto 0);
    r_V_17_fu_1054_p2 <= std_logic_vector(unsigned(rhs_V_14_cast_fu_1050_p1) + unsigned(r_V_15_reg_1546));
    r_V_1_fu_554_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(lhs_V_1_cast_fu_550_p1));
    r_V_2_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(r_V_2_fu_624_p3),17));
    r_V_2_fu_624_p3 <= (p_1_fu_608_p3 & ap_const_lv1_0);
    r_V_3_cast_fu_668_p1 <= std_logic_vector(resize(unsigned(r_V_3_reg_1270),18));
    r_V_3_fu_640_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_636_p1) + unsigned(r_V_2_cast_fu_632_p1));
    r_V_4_fu_674_p2 <= std_logic_vector(unsigned(r_V_3_cast_fu_668_p1) - unsigned(rhs_V_2_cast_fu_671_p1));
    r_V_6_cast_fu_654_p1 <= std_logic_vector(resize(unsigned(r_V_6_fu_646_p3),17));
    r_V_6_fu_646_p3 <= (p_2_fu_616_p3 & ap_const_lv1_0);
    r_V_7_cast_fu_693_p1 <= std_logic_vector(resize(unsigned(r_V_7_reg_1280),18));
    r_V_7_fu_662_p2 <= std_logic_vector(unsigned(lhs_V_4_cast_fu_658_p1) + unsigned(r_V_6_cast_fu_654_p1));
    r_V_8_fu_699_p2 <= std_logic_vector(unsigned(r_V_7_cast_fu_693_p1) - unsigned(rhs_V_5_cast_fu_696_p1));
    r_V_9_fu_1153_p2 <= (rhs_V_fu_1147_p2 and relu_en_V_read_reg_1186);
    r_V_fu_496_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(lhs_V_cast_fu_492_p1));
    rev_fu_960_p2 <= (slt_reg_1493 xor ap_const_lv1_1);
    rhs_V_10_cast_fu_774_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1228),24));
    rhs_V_14_cast_fu_1050_p1 <= std_logic_vector(resize(unsigned(i_op_assign_reg_409),48));
    rhs_V_1_cast_fu_768_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1209),16));
    rhs_V_1_fu_762_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1228),32));
    rhs_V_2_cast_fu_671_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1209),18));
    rhs_V_2_fu_765_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_1223),48));
    rhs_V_5_cast_fu_696_p1 <= std_logic_vector(resize(unsigned(Ky_V_read_reg_1203),18));
    rhs_V_7_cast_fu_780_p1 <= std_logic_vector(resize(unsigned(Wout_V_fu_734_p2),32));
    rhs_V_8_cast_fu_771_p1 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1216),48));
    rhs_V_9_cast_fu_777_p1 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1216),32));
    rhs_V_fu_1147_p2 <= (tmp_22_fu_1141_p2 and tmp_23_fu_441_p2);
    slt_fu_910_p2 <= "1" when (signed(lhs_V_15_cast_fu_906_p1) < signed(lhs_V_4_cast_reg_1275)) else "0";
    sum_4_to_int_fu_1112_p1 <= sum_3_reg_1601;
    tmp2_cast_fu_1084_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_1079_p2),48));
    tmp2_fu_1079_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1402) + unsigned(r_V_20_reg_420));
    tmp3_cast_fu_920_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_915_p2),48));
    tmp3_fu_915_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1402) + unsigned(r_V_11_reg_291));
    tmp_10_fu_756_p1 <= std_logic_vector(resize(unsigned(Sx_V_read_reg_1197),16));
    tmp_11_fu_759_p1 <= std_logic_vector(resize(unsigned(p_1_reg_1255),16));
    tmp_12_fu_590_p4 <= r_V_1_fu_554_p2(8 downto 1);
    tmp_15_cast_fu_795_p1 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_247),31));
    tmp_17_cast_fu_799_p1 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_247),32));
    tmp_17_fu_838_p2 <= std_logic_vector(unsigned(phi_mul1_reg_269) - unsigned(tmp_s_reg_1340));
    tmp_18_fu_502_p3 <= r_V_fu_496_p2(8 downto 8);
    tmp_19_fu_872_p2 <= std_logic_vector(unsigned(phi_mul3_reg_303) - unsigned(tmp_11_reg_1350));
    tmp_20_fu_1115_p4 <= sum_4_to_int_fu_1112_p1(30 downto 23);
    tmp_21_fu_560_p3 <= r_V_1_fu_554_p2(8 downto 8);
    tmp_22_fu_1141_p2 <= (notrhs_fu_1135_p2 or notlhs_fu_1129_p2);
    tmp_24_fu_924_p2 <= std_logic_vector(unsigned(r_V_5_reg_1442) + unsigned(tmp3_cast_fu_920_p1));
    tmp_25_fu_893_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_326),16));
    tmp_26_cast_cast_fu_929_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_924_p2),49));
    tmp_26_fu_981_p1 <= std_logic_vector(resize(unsigned(i_op_assign_5_reg_367),16));
    tmp_27_fu_990_p2 <= (w_V_fu_985_p2 or h_V_reg_1483);
    tmp_28_fu_1016_p2 <= "1" when (signed(lhs_V_11_cast_fu_1012_p1) < signed(lhs_V_2_cast_reg_1265)) else "0";
    tmp_29_cast_fu_718_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_1235),49));
    tmp_29_fu_730_p1 <= grp_fu_687_p2(16 - 1 downto 0);
    tmp_2_fu_516_p4 <= p_neg4_fu_510_p2(8 downto 1);
    tmp_30_cast_fu_721_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_1240),31));
    tmp_30_fu_740_p1 <= grp_fu_712_p2(16 - 1 downto 0);
    tmp_31_fu_1125_p1 <= sum_4_to_int_fu_1112_p1(23 - 1 downto 0);
    tmp_32_fu_995_p3 <= tmp_27_fu_990_p2(15 downto 15);
    tmp_33_cast_fu_724_p1 <= std_logic_vector(resize(unsigned(tmp_15_reg_1245),49));
    tmp_33_fu_1088_p2 <= std_logic_vector(unsigned(tmp1_reg_1556) + unsigned(tmp2_cast_fu_1084_p1));
    tmp_35_cast_fu_727_p1 <= std_logic_vector(resize(unsigned(tmp_16_reg_1250),48));
    tmp_36_cast_cast_fu_1093_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_1088_p2),49));
    tmp_3_fu_526_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_2_fu_516_p4));
    tmp_4_fu_574_p4 <= p_neg_fu_568_p2(8 downto 1);
    tmp_6_fu_532_p4 <= r_V_fu_496_p2(8 downto 1);
    tmp_7_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_30_fu_740_p1));
    tmp_8_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_4_fu_574_p4));
    tmp_9_fu_750_p1 <= std_logic_vector(resize(unsigned(Sy_V_read_reg_1191),16));
    tmp_fu_1025_p2 <= std_logic_vector(unsigned(r_V_13_reg_1513) + unsigned(lhs_V_14_cast_fu_1021_p1));
    tmp_s_fu_753_p1 <= std_logic_vector(resize(unsigned(p_2_reg_1260),16));
    w_V_fu_985_p2 <= std_logic_vector(unsigned(tmp_26_fu_981_p1) + unsigned(tmp_19_reg_1465));
end behav;
