-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.800000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=11,HLS_SYN_FF=3537,HLS_SYN_LUT=4499}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (76 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (76 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (76 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (76 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (76 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (76 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (76 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (76 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (76 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (76 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (76 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (76 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (76 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_94 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_174 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_181 : BOOLEAN;
    signal mode_V_read_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_209 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_217 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_225 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_346 : BOOLEAN;
    signal Ky_V_read_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_898 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_909 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_916 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_921 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_fu_392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_reg_940 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_384 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_393 : BOOLEAN;
    signal tmp_31_cast_fu_400_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_31_cast_reg_950 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_402 : BOOLEAN;
    signal grp_fu_376_ap_done : STD_LOGIC;
    signal grp_fu_386_ap_done : STD_LOGIC;
    signal tmp_32_cast_fu_403_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_32_cast_reg_955 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_15_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_967 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_fu_419_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_985 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_cast_fu_426_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast_reg_1000 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_sum_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_reg_1005 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_17_cast6_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_17_cast6_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_438 : BOOLEAN;
    signal c_fu_460_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_reg_1018 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_7_cast_fu_466_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_7_cast_reg_1023 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond1_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_455 : BOOLEAN;
    signal next_mul2_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_1035 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_485_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_1043 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_reg_1053 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_473 : BOOLEAN;
    signal next_mul9_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul9_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_482 : BOOLEAN;
    signal next_mul_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_515_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_reg_1079 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_495 : BOOLEAN;
    signal r_V_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_509 : BOOLEAN;
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_2_reg_1094 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_518 : BOOLEAN;
    signal jj_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_527 : BOOLEAN;
    signal w_V_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_reg_1112 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_3_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_541 : BOOLEAN;
    signal gmem_addr_2_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_554 : BOOLEAN;
    signal tmp_17_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_feature_in_load_2_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_566 : BOOLEAN;
    signal feature_in_load_1_sum_3_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_579 : BOOLEAN;
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_588 : BOOLEAN;
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_597 : BOOLEAN;
    signal gmem_addr_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_assign_8_reg_179 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_s_reg_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_201 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul8_reg_247 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_2_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_3_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in2_sum_cast_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum5_cast_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum6_cast_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out4_sum_cast_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_716 : BOOLEAN;
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_16_fu_392_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_16_fu_392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_546_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_570_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_875_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_14_fu_583_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of r_V_14_fu_583_p2 : signal is "no";
    signal feature_in2_sum_fu_587_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_868_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_11_fu_605_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_11_fu_605_p2 : signal is "no";
    signal feature_in2_sum5_fu_609_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum_3_to_int7_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_2_to_int_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_628_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_638_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_656_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_to_int_fu_715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_int_fu_733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_719_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_729_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_737_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_747_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_861_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_7_fu_809_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_7_fu_809_p2 : signal is "no";
    signal feature_in2_sum6_fu_813_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_cast_fu_833_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_837_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_17_cast_cast_fu_842_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out4_sum_fu_846_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_861_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_875_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_376_ap_start : STD_LOGIC;
    signal grp_fu_386_ap_start : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (76 downto 0);
    signal grp_fu_376_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_386_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_495_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_200 : BOOLEAN;
    signal ap_sig_187 : BOOLEAN;

    component Pool_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_udiv_16ns_8ns_16_20_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_32ns_16ns_48_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_32s_16ns_48_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mac_muladd_16ns_16s_48ns_48_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Pool_AXILiteS_s_axi_U : component Pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    Pool_gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1167,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_316,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Pool_fadd_32ns_32ns_32_5_full_dsp_U0 : component Pool_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_3_reg_280,
        din1 => reg_346,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    Pool_fdiv_32ns_32ns_32_16_U1 : component Pool_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_op_assign_reg_259,
        din1 => tmp_1_reg_990,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    Pool_sitofp_32ns_32_6_U2 : component Pool_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_338_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p1);

    Pool_fcmp_32ns_32ns_1_1_U3 : component Pool_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_280,
        din1 => reg_346,
        opcode => ap_const_lv5_2,
        dout => grp_fu_341_p2);

    Pool_udiv_16ns_8ns_16_20_seq_U4 : component Pool_udiv_16ns_8ns_16_20_seq
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_376_ap_start,
        done => grp_fu_376_ap_done,
        din0 => Win_V,
        din1 => grp_fu_376_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p2);

    Pool_udiv_16ns_8ns_16_20_seq_U5 : component Pool_udiv_16ns_8ns_16_20_seq
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_386_ap_start,
        done => grp_fu_386_ap_done,
        din0 => Hin_V,
        din1 => grp_fu_386_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    Pool_mul_32ns_16ns_48_3_U6 : component Pool_mul_32ns_16ns_48_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_495_p0,
        din1 => grp_fu_495_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    Pool_mul_32s_16ns_48_3_U7 : component Pool_mul_32s_16ns_48_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => r_V_reg_1084,
        din1 => grp_fu_554_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    Pool_mac_muladd_16ns_16s_48ns_48_1_U8 : component Pool_mac_muladd_16ns_16s_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_861_p0,
        din1 => w_V_reg_1112,
        din2 => r_V_2_reg_1094,
        dout => grp_fu_861_p3);

    Pool_mac_muladd_16ns_16s_48ns_48_1_U9 : component Pool_mac_muladd_16ns_16s_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_868_p0,
        din1 => w_V_reg_1112,
        din2 => r_V_2_reg_1094,
        dout => grp_fu_868_p3);

    Pool_mac_muladd_16ns_16s_48ns_48_1_U10 : component Pool_mac_muladd_16ns_16s_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_875_p0,
        din1 => w_V_reg_1112,
        din2 => r_V_2_reg_1094,
        dout => grp_fu_875_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_2) and not((((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_1) and not((((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                i_op_assign_1_reg_224 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_1_reg_224 <= j_reg_1071;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond4_fu_559_p2)))) then 
                i_op_assign_2_reg_269 <= ii_reg_1079;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_fu_510_p2))) then 
                i_op_assign_2_reg_269 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                i_op_assign_3_reg_299 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond4_fu_559_p2) and (mode_V_read_reg_882 = ap_const_lv2_3))) then 
                i_op_assign_3_reg_299 <= jj_fu_564_p2;
            elsif ((((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
                i_op_assign_3_reg_299 <= jj_reg_1104;
            end if; 
        end if;
    end process;

    i_op_assign_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = exitcond4_fu_559_p2)))) then 
                i_op_assign_reg_259 <= sum_3_reg_280;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_fu_510_p2))) then 
                i_op_assign_reg_259 <= p_sum_reg_1005;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_fu_510_p2)))) then 
                i_op_assign_s_reg_190 <= i_reg_1043;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (exitcond1_fu_455_p2 = ap_const_lv1_0))) then 
                i_op_assign_s_reg_190 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    op_assign_8_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond2_fu_480_p2)))) then 
                op_assign_8_reg_179 <= c_reg_1018;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_376_ap_done) or (ap_const_logic_0 = grp_fu_386_ap_done))))) then 
                op_assign_8_reg_179 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_fu_510_p2)))) then 
                phi_mul1_reg_201 <= next_mul2_reg_1035;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (exitcond1_fu_455_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_201 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                phi_mul8_reg_247 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76) and not((gmem_BVALID = ap_const_logic_0)))) then 
                phi_mul8_reg_247 <= next_mul9_reg_1058;
            end if; 
        end if;
    end process;

    r_V_10_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                r_V_10_reg_235 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76) and not((gmem_BVALID = ap_const_logic_0)))) then 
                r_V_10_reg_235 <= next_mul_reg_1063;
            end if; 
        end if;
    end process;

    r_V_4_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_fu_510_p2)))) then 
                r_V_4_reg_213 <= next_mul1_reg_1030;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (exitcond1_fu_455_p2 = ap_const_lv1_0))) then 
                r_V_4_reg_213 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_3_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
                sum_3_reg_280 <= i_op_assign_reg_259;
            elsif (((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then 
                sum_3_reg_280 <= sum_3_feature_in_load_2_fu_707_p3;
            elsif (((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then 
                sum_3_reg_280 <= feature_in_load_1_sum_3_fu_798_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond4_fu_559_p2) and (mode_V_read_reg_882 = ap_const_lv2_3))) then 
                sum_3_reg_280 <= sum_3_reg_280;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                sum_3_reg_280 <= grp_fu_328_p2;
            end if; 
        end if;
    end process;

    sum_5_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (tmp_6_reg_972 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond3_fu_521_p2)))) then 
                sum_5_reg_316 <= i_op_assign_reg_259;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69) and not((tmp_6_reg_972 = ap_const_lv1_0)))) then 
                sum_5_reg_316 <= grp_fu_333_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_909 <= CHin_V;
                Kx_V_read_reg_893 <= Kx_V;
                Ky_V_read_reg_888 <= Ky_V;
                Win_V_read_reg_898 <= Win_V;
                    lhs_V_reg_926(7 downto 0) <= lhs_V_fu_372_p1(7 downto 0);
                mode_V_read_reg_882 <= mode_V;
                    rhs_V_reg_933(7 downto 0) <= rhs_V_fu_382_p1(7 downto 0);
                tmp_3_reg_916 <= feature_out(31 downto 2);
                tmp_5_reg_921 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                c_reg_1018 <= c_fu_460_p2;
                    i_op_assign_17_cast6_reg_1010(15 downto 0) <= i_op_assign_17_cast6_fu_451_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                gmem_addr_1_reg_1151 <= feature_in2_sum6_cast_fu_818_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then
                gmem_addr_2_reg_1125 <= feature_in2_sum5_cast_fu_614_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then
                gmem_addr_3_reg_1119 <= feature_in2_sum_cast_fu_592_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then
                gmem_addr_reg_1167 <= feature_out4_sum_cast_fu_851_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                i_reg_1043 <= i_fu_485_p2;
                next_mul1_reg_1030 <= next_mul1_fu_470_p2;
                next_mul2_reg_1035 <= next_mul2_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                ii_reg_1079 <= ii_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                j_reg_1071 <= j_fu_515_p2;
                next_mul9_reg_1058 <= next_mul9_fu_500_p2;
                next_mul_reg_1063 <= next_mul_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                jj_reg_1104 <= jj_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_376_ap_done) or (ap_const_logic_0 = grp_fu_386_ap_done))))) then
                    p_sum_reg_1005(5 downto 2) <= p_sum_fu_443_p3(5 downto 2);    p_sum_reg_1005(7) <= p_sum_fu_443_p3(7);    p_sum_reg_1005(9) <= p_sum_fu_443_p3(9);    p_sum_reg_1005(13) <= p_sum_fu_443_p3(13);    p_sum_reg_1005(16 downto 15) <= p_sum_fu_443_p3(16 downto 15);    p_sum_reg_1005(21 downto 20) <= p_sum_fu_443_p3(21 downto 20);    p_sum_reg_1005(25 downto 23) <= p_sum_fu_443_p3(25 downto 23);    p_sum_reg_1005(28 downto 27) <= p_sum_fu_443_p3(28 downto 27);    p_sum_reg_1005(31 downto 30) <= p_sum_fu_443_p3(31 downto 30);
                r_V_15_reg_962 <= grp_fu_376_p2;
                    rhs_V_1_cast_reg_995(15 downto 0) <= rhs_V_1_cast_fu_422_p1(15 downto 0);
                    rhs_V_1_reg_976(15 downto 0) <= rhs_V_1_fu_416_p1(15 downto 0);
                    rhs_V_2_cast_reg_1000(15 downto 0) <= rhs_V_2_cast_fu_426_p1(15 downto 0);
                    rhs_V_2_reg_985(15 downto 0) <= rhs_V_2_fu_419_p1(15 downto 0);
                tmp_1_reg_990 <= grp_fu_338_p1;
                    tmp_31_cast_reg_950(29 downto 0) <= tmp_31_cast_fu_400_p1(29 downto 0);
                    tmp_32_cast_reg_955(29 downto 0) <= tmp_32_cast_fu_403_p1(29 downto 0);
                tmp_4_reg_967 <= grp_fu_386_p2;
                tmp_6_reg_972 <= tmp_6_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                r_V_16_reg_940 <= r_V_16_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                r_V_1_reg_1053 <= grp_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then
                r_V_2_reg_1094 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond3_fu_521_p2))) then
                r_V_reg_1084 <= r_V_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and (mode_V_read_reg_882 = ap_const_lv2_2) and not(ap_sig_346)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and not(ap_sig_346)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and not((gmem_RVALID = ap_const_logic_0))))) then
                reg_346 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (exitcond1_fu_455_p2 = ap_const_lv1_0))) then
                    rhs_V_7_cast_reg_1023(15 downto 0) <= rhs_V_7_cast_fu_466_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then
                tmp_17_reg_1136 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then
                tmp_26_reg_1131 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and (ap_const_lv1_0 = exitcond4_fu_559_p2))) then
                w_V_reg_1112 <= w_V_fu_574_p2;
            end if;
        end if;
    end process;
    lhs_V_reg_926(15 downto 8) <= "00000000";
    rhs_V_reg_933(15 downto 8) <= "00000000";
    tmp_31_cast_reg_950(48 downto 30) <= "0000000000000000000";
    tmp_32_cast_reg_955(47 downto 30) <= "000000000000000000";
    rhs_V_1_reg_976(31 downto 16) <= "0000000000000000";
    rhs_V_2_reg_985(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_cast_reg_995(31 downto 16) <= "0000000000000000";
    rhs_V_2_cast_reg_1000(47 downto 16) <= "00000000000000000000000000000000";
    p_sum_reg_1005(1 downto 0) <= "00";
    p_sum_reg_1005(6 downto 6) <= "0";
    p_sum_reg_1005(8 downto 8) <= "0";
    p_sum_reg_1005(12 downto 10) <= "000";
    p_sum_reg_1005(14 downto 14) <= "0";
    p_sum_reg_1005(19 downto 17) <= "000";
    p_sum_reg_1005(22 downto 22) <= "0";
    p_sum_reg_1005(26 downto 26) <= "0";
    p_sum_reg_1005(29) <= '0';
    i_op_assign_17_cast6_reg_1010(31 downto 16) <= "0000000000000000";
    rhs_V_7_cast_reg_1023(47 downto 16) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, mode_V_read_reg_882, gmem_RVALID, gmem_BVALID, ap_sig_346, grp_fu_376_ap_done, grp_fu_386_ap_done, tmp_6_reg_972, exitcond1_fu_455_p2, exitcond2_fu_480_p2, exitcond3_fu_521_p2, exitcond4_fu_559_p2, exitcond_fu_510_p2, ap_sig_ioackin_gmem_ARREADY, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if (not(((ap_const_logic_0 = grp_fu_376_ap_done) or (ap_const_logic_0 = grp_fu_386_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((exitcond1_fu_455_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                if ((ap_const_lv1_0 = exitcond2_fu_480_p2)) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                if ((ap_const_lv1_0 = exitcond_fu_510_p2)) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st26_fsm_25 => 
                if (((tmp_6_reg_972 = ap_const_lv1_0) and not((ap_const_lv1_0 = exitcond3_fu_521_p2)))) then
                    ap_NS_fsm <= ap_ST_st70_fsm_69;
                elsif ((not((tmp_6_reg_972 = ap_const_lv1_0)) and not((ap_const_lv1_0 = exitcond3_fu_521_p2)))) then
                    ap_NS_fsm <= ap_ST_st56_fsm_55;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                if (((ap_const_lv1_0 = exitcond4_fu_559_p2) and (mode_V_read_reg_882 = ap_const_lv2_0))) then
                    ap_NS_fsm <= ap_ST_st42_fsm_41;
                elsif ((((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_lv1_0 = exitcond4_fu_559_p2)) or ((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_lv1_0 = exitcond4_fu_559_p2)))) then
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                elsif (((ap_const_lv1_0 = exitcond4_fu_559_p2) and (mode_V_read_reg_882 = ap_const_lv2_3))) then
                    ap_NS_fsm <= ap_ST_st30_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                if ((not((((mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) and ((mode_V_read_reg_882 = ap_const_lv2_1) or (mode_V_read_reg_882 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                if ((not(ap_sig_346) and ((mode_V_read_reg_882 = ap_const_lv2_1) or (mode_V_read_reg_882 = ap_const_lv2_2)))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                end if;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st72_fsm_71;
                else
                    ap_NS_fsm <= ap_ST_st71_fsm_70;
                end if;
            when ap_ST_st72_fsm_71 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st73_fsm_72;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_71;
                end if;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st77_fsm_76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond1_fu_455_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((exitcond1_fu_455_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond1_fu_455_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((exitcond1_fu_455_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    ap_sig_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_174 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    ap_sig_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_181 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_187_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, mode_V_read_reg_882)
    begin
                ap_sig_187 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_1));
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_200_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, mode_V_read_reg_882)
    begin
                ap_sig_200 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_2));
    end process;


    ap_sig_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_209 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    ap_sig_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_217 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    ap_sig_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_225 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    ap_sig_346_assign_proc : process(mode_V_read_reg_882, gmem_RVALID)
    begin
                ap_sig_346 <= (((mode_V_read_reg_882 = ap_const_lv2_2) and (gmem_RVALID = ap_const_logic_0)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_sig_384_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_384 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_393_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_393 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_402_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_402 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_438 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_455_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_455 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_473_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_473 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_482_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_482 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_495_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_495 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_509_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_509 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_518_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_518 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_527_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_527 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_541_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_541 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_554_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_554 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_566_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_566 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_579_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_579 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_588_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_588 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    ap_sig_597_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_597 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    ap_sig_716_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_716 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    ap_sig_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_94 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_384)
    begin
        if (ap_sig_384) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_393)
    begin
        if (ap_sig_393) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_94)
    begin
        if (ap_sig_94) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_402)
    begin
        if (ap_sig_402) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_438)
    begin
        if (ap_sig_438) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_455)
    begin
        if (ap_sig_455) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_473)
    begin
        if (ap_sig_473) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_482)
    begin
        if (ap_sig_482) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_495)
    begin
        if (ap_sig_495) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_509)
    begin
        if (ap_sig_509) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_518)
    begin
        if (ap_sig_518) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_527)
    begin
        if (ap_sig_527) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_541)
    begin
        if (ap_sig_541) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_181)
    begin
        if (ap_sig_181) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_554)
    begin
        if (ap_sig_554) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_566)
    begin
        if (ap_sig_566) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_579)
    begin
        if (ap_sig_579) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_174)
    begin
        if (ap_sig_174) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_716)
    begin
        if (ap_sig_716) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_588)
    begin
        if (ap_sig_588) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_597)
    begin
        if (ap_sig_597) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_209)
    begin
        if (ap_sig_209) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_217)
    begin
        if (ap_sig_217) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_225)
    begin
        if (ap_sig_225) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_fu_460_p2 <= std_logic_vector(unsigned(op_assign_8_reg_179) + unsigned(ap_const_lv16_1));
    exitcond1_fu_455_p2 <= "1" when (op_assign_8_reg_179 = CHin_V_read_reg_909) else "0";
    exitcond2_fu_480_p2 <= "1" when (i_op_assign_s_reg_190 = tmp_4_reg_967) else "0";
    exitcond3_fu_521_p2 <= "1" when (i_op_assign_2_reg_269 = Ky_V_read_reg_888) else "0";
    exitcond4_fu_559_p2 <= "1" when (i_op_assign_3_reg_299 = Kx_V_read_reg_893) else "0";
    exitcond_fu_510_p2 <= "1" when (i_op_assign_1_reg_224 = r_V_15_reg_962) else "0";
        feature_in2_sum5_cast_fu_614_p1 <= std_logic_vector(resize(signed(feature_in2_sum5_fu_609_p2),64));

    feature_in2_sum5_fu_609_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_955) + unsigned(r_V_11_fu_605_p2));
        feature_in2_sum6_cast_fu_818_p1 <= std_logic_vector(resize(signed(feature_in2_sum6_fu_813_p2),64));

    feature_in2_sum6_fu_813_p2 <= std_logic_vector(unsigned(r_V_7_fu_809_p2) + unsigned(tmp_32_cast_reg_955));
        feature_in2_sum_cast_fu_592_p1 <= std_logic_vector(resize(signed(feature_in2_sum_fu_587_p2),64));

    feature_in2_sum_fu_587_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_955) + unsigned(r_V_14_fu_583_p2));
    feature_in_load_1_sum_3_fu_798_p3 <= 
        reg_346 when (tmp_18_fu_793_p2(0) = '1') else 
        sum_3_reg_280;
    feature_in_load_1_to_int_fu_733_p1 <= reg_346;
    feature_in_load_2_to_int_fu_642_p1 <= reg_346;
    feature_out4_sum_cast_fu_851_p1 <= std_logic_vector(resize(unsigned(feature_out4_sum_fu_846_p2),64));
    feature_out4_sum_fu_846_p2 <= std_logic_vector(unsigned(tmp_17_cast_cast_fu_842_p1) + unsigned(tmp_31_cast_reg_950));

    gmem_ARADDR_assign_proc : process(ap_sig_cseq_ST_st43_fsm_42, gmem_addr_3_reg_1119, gmem_addr_2_reg_1125, gmem_addr_1_reg_1151, ap_reg_ioackin_gmem_ARREADY, ap_sig_200, ap_sig_187)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
                gmem_ARADDR <= gmem_addr_1_reg_1151;
            elsif (ap_sig_187) then 
                gmem_ARADDR <= gmem_addr_2_reg_1125;
            elsif (ap_sig_200) then 
                gmem_ARADDR <= gmem_addr_3_reg_1119;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st32_fsm_31, mode_V_read_reg_882, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st71_fsm_70, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_sig_cseq_ST_st77_fsm_76, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49, mode_V_read_reg_882, ap_sig_cseq_ST_st39_fsm_38, gmem_RVALID, ap_sig_346)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and (mode_V_read_reg_882 = ap_const_lv2_2) and not(ap_sig_346)) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and not(ap_sig_346)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and not((gmem_RVALID = ap_const_logic_0))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_sig_cseq_ST_st72_fsm_71, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st32_fsm_31, mode_V_read_reg_882)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (mode_V_read_reg_882 = ap_const_lv2_2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_sig_cseq_ST_st71_fsm_70)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_sig_cseq_ST_st77_fsm_76)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_sig_cseq_ST_st50_fsm_49, mode_V_read_reg_882, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or ((mode_V_read_reg_882 = ap_const_lv2_1) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38) and (mode_V_read_reg_882 = ap_const_lv2_2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_sig_cseq_ST_st72_fsm_71)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_338_p0 <= std_logic_vector(resize(unsigned(r_V_16_reg_940),32));

    grp_fu_376_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_376_ap_start <= ap_const_logic_1;
        else 
            grp_fu_376_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_376_p1 <= grp_fu_376_p10(8 - 1 downto 0);
    grp_fu_376_p10 <= std_logic_vector(resize(unsigned(Kx_V),16));

    grp_fu_386_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_386_ap_start <= ap_const_logic_1;
        else 
            grp_fu_386_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_386_p1 <= grp_fu_386_p10(8 - 1 downto 0);
    grp_fu_386_p10 <= std_logic_vector(resize(unsigned(Ky_V),16));
    grp_fu_495_p0 <= grp_fu_495_p00(32 - 1 downto 0);
    grp_fu_495_p00 <= std_logic_vector(resize(unsigned(r_V_4_reg_213),48));
    grp_fu_495_p1 <= rhs_V_2_cast_reg_1000(16 - 1 downto 0);
    grp_fu_554_p1 <= rhs_V_2_reg_985(16 - 1 downto 0);
    grp_fu_861_p0 <= rhs_V_1_reg_976(16 - 1 downto 0);
    grp_fu_868_p0 <= rhs_V_1_reg_976(16 - 1 downto 0);
    grp_fu_875_p0 <= rhs_V_1_reg_976(16 - 1 downto 0);
    h_V_fu_536_p2 <= std_logic_vector(unsigned(tmp_8_fu_532_p1) + unsigned(phi_mul1_reg_201));
    i_fu_485_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_190) + unsigned(ap_const_lv16_1));
    i_op_assign_17_cast6_fu_451_p1 <= std_logic_vector(resize(unsigned(op_assign_8_reg_179),32));
    ii_fu_526_p2 <= std_logic_vector(unsigned(i_op_assign_2_reg_269) + unsigned(ap_const_lv8_1));
    j_fu_515_p2 <= std_logic_vector(unsigned(i_op_assign_1_reg_224) + unsigned(ap_const_lv16_1));
    jj_fu_564_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_299) + unsigned(ap_const_lv8_1));
    lhs_V_fu_372_p1 <= std_logic_vector(resize(unsigned(Kx_V),16));
    next_mul1_fu_470_p2 <= std_logic_vector(unsigned(r_V_4_reg_213) + unsigned(rhs_V_1_cast_reg_995));
    next_mul2_fu_475_p2 <= std_logic_vector(unsigned(phi_mul1_reg_201) + unsigned(rhs_V_reg_933));
    next_mul9_fu_500_p2 <= std_logic_vector(unsigned(phi_mul8_reg_247) + unsigned(lhs_V_reg_926));
    next_mul_fu_505_p2 <= std_logic_vector(unsigned(r_V_10_reg_235) + unsigned(rhs_V_1_reg_976));
    notlhs1_fu_751_p2 <= "0" when (tmp_fu_719_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_769_p2 <= "0" when (tmp_12_fu_737_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_678_p2 <= "0" when (tmp_21_fu_646_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_660_p2 <= "0" when (tmp_19_fu_628_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_757_p2 <= "1" when (tmp_11_fu_729_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_775_p2 <= "1" when (tmp_13_fu_747_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_684_p2 <= "1" when (tmp_22_fu_656_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_666_p2 <= "1" when (tmp_20_fu_638_p1 = ap_const_lv23_0) else "0";
    p_sum_fu_443_p3 <= 
        sum_fu_429_p3 when (tmp_2_fu_437_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
    r_V_11_fu_605_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1023) + unsigned(grp_fu_868_p3));
    r_V_14_fu_583_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1023) + unsigned(grp_fu_875_p3));
    r_V_16_fu_392_p0 <= rhs_V_reg_933(8 - 1 downto 0);
    r_V_16_fu_392_p1 <= lhs_V_reg_926(8 - 1 downto 0);
    r_V_16_fu_392_p2 <= std_logic_vector(resize(unsigned(r_V_16_fu_392_p0) * unsigned(r_V_16_fu_392_p1), 16));
    r_V_7_fu_809_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_reg_1023) + unsigned(grp_fu_861_p3));
    r_V_fu_546_p0 <= h_V_fu_536_p2;
    r_V_fu_546_p1 <= rhs_V_1_reg_976(16 - 1 downto 0);
    r_V_fu_546_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(r_V_fu_546_p0) * signed('0' &r_V_fu_546_p1))), 32));
    rhs_V_1_cast_fu_422_p1 <= std_logic_vector(resize(unsigned(grp_fu_376_p2),32));
    rhs_V_1_fu_416_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_909),32));
    rhs_V_2_cast_fu_426_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_909),48));
    rhs_V_2_fu_419_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_898),48));
    rhs_V_7_cast_fu_466_p1 <= std_logic_vector(resize(unsigned(op_assign_8_reg_179),48));
    rhs_V_fu_382_p1 <= std_logic_vector(resize(unsigned(Ky_V),16));
    sum_3_feature_in_load_2_fu_707_p3 <= 
        sum_3_reg_280 when (tmp_27_fu_702_p2(0) = '1') else 
        reg_346;
    sum_3_to_int7_fu_624_p1 <= sum_3_reg_280;
    sum_3_to_int_fu_715_p1 <= sum_3_reg_280;
    sum_fu_429_p3 <= 
        ap_const_lv32_0 when (tmp_6_fu_406_p2(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    tmp1_cast_fu_833_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_828_p2),48));
    tmp1_fu_828_p2 <= std_logic_vector(unsigned(i_op_assign_17_cast6_reg_1010) + unsigned(r_V_10_reg_235));
    tmp_10_fu_570_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_299),16));
    tmp_11_fu_729_p1 <= sum_3_to_int_fu_715_p1(23 - 1 downto 0);
    tmp_12_fu_737_p4 <= feature_in_load_1_to_int_fu_733_p1(30 downto 23);
    tmp_13_fu_747_p1 <= feature_in_load_1_to_int_fu_733_p1(23 - 1 downto 0);
    tmp_14_fu_763_p2 <= (notrhs1_fu_757_p2 or notlhs1_fu_751_p2);
    tmp_15_fu_781_p2 <= (notrhs2_fu_775_p2 or notlhs2_fu_769_p2);
    tmp_16_fu_787_p2 <= (tmp_14_fu_763_p2 and tmp_15_fu_781_p2);
    tmp_17_cast_cast_fu_842_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_837_p2),49));
    tmp_18_fu_793_p2 <= (tmp_16_fu_787_p2 and tmp_17_reg_1136);
    tmp_19_fu_628_p4 <= sum_3_to_int7_fu_624_p1(30 downto 23);
    tmp_20_fu_638_p1 <= sum_3_to_int7_fu_624_p1(23 - 1 downto 0);
    tmp_21_fu_646_p4 <= feature_in_load_2_to_int_fu_642_p1(30 downto 23);
    tmp_22_fu_656_p1 <= feature_in_load_2_to_int_fu_642_p1(23 - 1 downto 0);
    tmp_23_fu_672_p2 <= (notrhs_fu_666_p2 or notlhs_fu_660_p2);
    tmp_24_fu_690_p2 <= (notrhs9_fu_684_p2 or notlhs8_fu_678_p2);
    tmp_25_fu_696_p2 <= (tmp_23_fu_672_p2 and tmp_24_fu_690_p2);
    tmp_27_fu_702_p2 <= (tmp_25_fu_696_p2 and tmp_26_reg_1131);
    tmp_2_fu_437_p2 <= (tmp_6_fu_406_p2 or tmp_7_fu_411_p2);
    tmp_31_cast_fu_400_p1 <= std_logic_vector(resize(unsigned(tmp_3_reg_916),49));
    tmp_32_cast_fu_403_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_921),48));
    tmp_6_fu_406_p2 <= "1" when (mode_V_read_reg_882 = ap_const_lv2_0) else "0";
    tmp_7_fu_411_p2 <= "1" when (mode_V_read_reg_882 = ap_const_lv2_1) else "0";
    tmp_8_fu_532_p1 <= std_logic_vector(resize(unsigned(i_op_assign_2_reg_269),16));
    tmp_9_fu_837_p2 <= std_logic_vector(unsigned(r_V_1_reg_1053) + unsigned(tmp1_cast_fu_833_p1));
    tmp_fu_719_p4 <= sum_3_to_int_fu_715_p1(30 downto 23);
    w_V_fu_574_p2 <= std_logic_vector(unsigned(phi_mul8_reg_247) + unsigned(tmp_10_fu_570_p1));
end behav;
